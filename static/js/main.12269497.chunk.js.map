{"version":3,"sources":["components/Header.js","app/theme.js","views/ChooseCipherType/ChooseCipherType.js","components/Alert.js","views/EncryptionPage/EncryptionPage.js","app/routes.js","app/app.js","serviceWorker.js","index.js","views/EncryptionPage/EncryptionPage.module.css","views/ChooseCipherType/ChooseCipherType.module.css","app/app.module.css"],"names":["Header","title","routes","path","useState","drawerIsOpen","setDrawerIsOpen","history","useHistory","toggleDrawer","evt","type","key","state","AppBar","position","Toolbar","IconButton","edge","color","aria-label","onClick","Typography","variant","Drawer","open","onClose","role","onKeyDown","style","width","List","map","el","idx","ListItem","button","selected","includes","push","ListItemIcon","icon","ListItemText","primary","theme","responsiveFontSizes","createMuiTheme","palette","main","secondary","success","error","contrastThreshold","tonalOffset","ChooseCipherType","className","component","marginBottom","Button","size","btn","Alert","isOpen","handleClose","Dialog","aria-labelledby","aria-describedby","DialogTitle","id","DialogActions","autoFocus","EncryptionPage","text","setText","setKey","showKey","setShowKey","alert","setAlert","isUppercase","val","isLowercase","isLetter","char","doCrypt","isDecrypt","length","keyVal","result","i","charCodeAt","filterKey","textValue","keyValue","output","j","String","fromCharCode","charAt","vigenereCrypt","Number","isNaN","parseInt","caesarCrypt","wrpVertical","autoComplete","wrp","TextField","label","placeholder","multiline","rows","value","onChange","currentTarget","half","FormControl","InputLabel","OutlinedInput","labelWidth","endAdornment","InputAdornment","onMouseDown","e","preventDefault","Visibility","VisibilityOff","startIcon","Lock","quarter","LockOpen","replace","Home","Https","EnhancedEncryption","App","ThemeProvider","app","exact","from","to","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports"],"mappings":"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","file":"static/js/main.12269497.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  IconButton,\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n} from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nconst Header = ({ title, routes, path }) => {\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n  let history = useHistory();\n\n  const toggleDrawer = (evt) => {\n    if (evt.type === 'keydown' && (evt.key === 'Tab' || evt.key === 'Shift')) return;\n    setDrawerIsOpen((state) => !state);\n  };\n\n  return (\n    <>\n      <AppBar position={'fixed'}>\n        <Toolbar>\n          <IconButton edge={'start'} color={'inherit'} aria-label={'menu'} onClick={toggleDrawer}>\n            <MenuIcon />\n          </IconButton>\n          <Typography variant={'h6'}>{title ? title : '404'}</Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer open={drawerIsOpen} onClose={toggleDrawer}>\n        <div role={'presentation'} onClick={toggleDrawer} onKeyDown={toggleDrawer} style={{ width: 250 }}>\n          <List>\n            {routes.map((el, idx) => (\n              <ListItem button selected={path.includes(el.path)} onClick={() => history.push(el.path)} key={idx}>\n                <ListItemIcon>{el.icon}</ListItemIcon>\n                <ListItemText primary={el.title} />\n              </ListItem>\n            ))}\n          </List>\n        </div>\n      </Drawer>\n    </>\n  );\n};\n\nexport default Header;\n","import { createMuiTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nconst theme = responsiveFontSizes(\n  createMuiTheme({\n    palette: {\n      type: 'dark',\n      primary: {\n        main: '#61892f',\n      },\n      secondary: {\n        main: '#86c232',\n      },\n      success: {\n        main: '#6b6970',\n      },\n      error: {\n        main: '#474b4f',\n      },\n      contrastThreshold: 3,\n      tonalOffset: 0.3,\n    },\n  })\n);\n\nexport default theme;\n","import React from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport { useHistory } from 'react-router-dom';\nimport style from './ChooseCipherType.module.css';\n\nexport const ChooseCipherType = () => {\n  let history = useHistory();\n\n  return (\n    <div className={'wrapper-vertical'}>\n      <Typography variant={'h3'} component={'h1'} color={'secondary'} style={{ marginBottom: 30 }}>\n        What type of cipher do you want to use?\n      </Typography>\n      <div className={'wrapper'}>\n        <Button\n          size={'large'}\n          variant={'contained'}\n          color={'primary'}\n          className={style.btn}\n          onClick={() => history.push('/caesar')}\n        >\n          &nbsp;&nbsp;Caesar&nbsp;&nbsp;\n        </Button>\n        <Button\n          size={'large'}\n          variant={'contained'}\n          color={'primary'}\n          className={style.btn}\n          onClick={() => history.push('/vigenere')}\n        >\n          Vigenère\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ChooseCipherType;\n","import React from 'react';\nimport { Button, Dialog, DialogActions, DialogTitle } from '@material-ui/core';\n\nconst Alert = ({ title, isOpen = false, onClose: handleClose }) => (\n  <Dialog\n    open={isOpen}\n    onClose={handleClose}\n    aria-labelledby={'alert-dialog-title'}\n    aria-describedby={'alert-dialog-description'}\n  >\n    <DialogTitle id={'alert-dialog-title'}>{title}</DialogTitle>\n    <DialogActions>\n      <Button onClick={handleClose} color={'primary'} autoFocus>\n        Close\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nexport default Alert;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  Button,\n  TextField,\n  Typography,\n  FormControl,\n  InputLabel,\n  OutlinedInput,\n  InputAdornment,\n  IconButton,\n} from '@material-ui/core';\nimport { Lock, LockOpen, Visibility, VisibilityOff } from '@material-ui/icons';\nimport style from './EncryptionPage.module.css';\nimport Alert from '../../components/Alert';\n\nconst EncryptionPage = ({ type }) => {\n  const [text, setText] = useState('');\n  const [key, setKey] = useState('');\n  const [showKey, setShowKey] = useState(false);\n  const [alert, setAlert] = useState({ isOpen: false });\n  let history = useHistory();\n\n  // Tests whether the specified character code is an 'letter/uppercase letter/lowercase letter'.\n  const isUppercase = (val) => 65 <= val && val <= 90; // 65 is character code for 'A'. 90 is 'Z'.\n  const isLowercase = (val) => 97 <= val && val <= 122; // 97 is character code for 'a'. 122 is 'z'.\n  const isLetter = (char) => isUppercase(char) || isLowercase(char); // is a letter\n\n  /*\n   * Returns an array of numbers, each in the range [0, 26), representing the given key.\n   * The key is case-insensitive, and non-letters are ignored.\n   * Examples:\n   * - filterKey(\"AAA\") = [0, 0, 0].\n   * - filterKey(\"abc\") = [0, 1, 2].\n   * - filterKey(\"the $123# EHT\") = [19, 7, 4, 4, 7, 19].\n   */\n  const filterKey = (key) => {\n    const result = [];\n    for (let i = 0; i < key.length; i++) {\n      const char = key.charCodeAt(i);\n      if (isLetter(char)) result.push((char - 65) % 32);\n    }\n    return result;\n  };\n\n  // Returns the result the Vigenère encryption on the given text with the given key.\n  const vigenereCrypt = (textValue, keyValue) => {\n    let output = '';\n    for (let i = 0, j = 0; i < textValue.length; i++) {\n      // Get the character code of each letter\n      let char = textValue.charCodeAt(i);\n\n      // Handle 'uppercase letters/lowercase letters/other chars'\n      if (isUppercase(char)) {\n        output += String.fromCharCode(((char - 65 + keyValue[j % keyValue.length]) % 26) + 65);\n        j++;\n      } else if (isLowercase(char)) {\n        output += String.fromCharCode(((char - 97 + keyValue[j % keyValue.length]) % 26) + 97);\n        j++;\n      } else {\n        output += textValue.charAt(i);\n      }\n    }\n\n    return output;\n  };\n\n  // Returns the result the Caesar encryption on the given text with the given key (only number).\n  const caesarCrypt = (textValue, keyValue) => {\n    let output = '';\n    for (let i = 0; i < textValue.length; i++) {\n      // Get the character code of each letter\n      let char = textValue.charCodeAt(i);\n\n      // Handle 'uppercase letters/lowercase letters/other chars'\n      if (isUppercase(char)) {\n        output += String.fromCharCode(((char - 65 + keyValue) % 26) + 65);\n      } else if (isLowercase(char)) {\n        output += String.fromCharCode(((char - 97 + keyValue) % 26) + 97);\n      } else {\n        output += textValue.charAt(i);\n      }\n    }\n\n    return output;\n  };\n\n  // Handles the input/output for Vigenère cipher encryption/decription.\n  const doCrypt = (isDecrypt, type) => {\n    if (key.length === 0) {\n      setAlert((state) => ({ ...state, title: 'Key is empty', isOpen: true }));\n      return;\n    }\n\n    if (type === 'vigenere') {\n      let keyVal = filterKey(key);\n\n      if (keyVal.length === 0) {\n        setAlert((state) => ({ ...state, title: 'Key has no letters', isOpen: true }));\n        return;\n      }\n      if (isDecrypt) for (let i = 0; i < keyVal.length; i++) keyVal[i] = (26 - keyVal[i]) % 26;\n\n      setText((state) => vigenereCrypt(state, keyVal));\n    }\n\n    if (type === 'caesar') {\n      if (Number.isNaN(key)) {\n        setAlert((state) => ({ ...state, title: 'Key has no numbers', isOpen: true }));\n        return;\n      }\n\n      let keyVal = Number.parseInt(key);\n      if (isDecrypt) keyVal = (26 - keyVal) % 26;\n\n      setText((state) => caesarCrypt(state, keyVal));\n    }\n  };\n\n  return (\n    <>\n      <Alert\n        title={alert.title}\n        isOpen={alert.isOpen}\n        onClose={() => setAlert((state) => ({ ...state, isOpen: false }))}\n      />\n      {type ? (\n        <div className={style.wrpVertical}>\n          <Typography variant={'h4'} component={'h2'} color={'secondary'} style={{ marginBottom: 20 }}>\n            {type === 'vigenere' && 'Vigenère crypt'}\n            {type === 'caesar' && 'Caesar crypt'}\n          </Typography>\n          <form className={style.wrpVertical} autoComplete={'off'}>\n            <div className={style.wrp}>\n              <TextField\n                label={'Text'}\n                placeholder={'Text to be encrypted/decrypted'}\n                variant={'outlined'}\n                color={'primary'}\n                multiline\n                rows={5}\n                style={{ width: '100%' }}\n                value={text}\n                onChange={({ currentTarget }) => setText(currentTarget.value)}\n              />\n            </div>\n            <div className={style.wrp}>\n              {type === 'caesar' ? (\n                <TextField\n                  type={'number'}\n                  label={'Key'}\n                  placeholder={'Encryption key (number)'}\n                  size={'medium'}\n                  variant={'outlined'}\n                  color={'secondary'}\n                  className={style.half}\n                  value={key}\n                  onChange={({ currentTarget }) => setKey(currentTarget.value)}\n                />\n              ) : (\n                <FormControl className={style.half} variant={'outlined'}>\n                  <InputLabel>Key</InputLabel>\n                  <OutlinedInput\n                    type={showKey ? 'text' : 'password'}\n                    value={key}\n                    onChange={({ currentTarget }) => setKey(currentTarget.value)}\n                    labelWidth={31}\n                    endAdornment={\n                      <InputAdornment position={'end'}>\n                        <IconButton\n                          aria-label={'toggle password visibility'}\n                          onClick={() => setShowKey((state) => !state)}\n                          onMouseDown={(e) => e.preventDefault()}\n                          edge={'end'}\n                        >\n                          {showKey ? <Visibility /> : <VisibilityOff />}\n                        </IconButton>\n                      </InputAdornment>\n                    }\n                  />\n                </FormControl>\n              )}\n              <Button\n                size={'large'}\n                variant={'contained'}\n                color={'primary'}\n                startIcon={<Lock />}\n                className={style.quarter}\n                onClick={() => doCrypt(false, type)}\n              >\n                Encrypt\n              </Button>\n              <Button\n                size={'large'}\n                variant={'contained'}\n                color={'primary'}\n                startIcon={<LockOpen />}\n                className={style.quarter}\n                onClick={() => doCrypt(true, type)}\n              >\n                Decrypt\n              </Button>\n            </div>\n          </form>\n        </div>\n      ) : (\n        history.replace('/home')\n      )}\n    </>\n  );\n};\n\nexport default EncryptionPage;\n","import React from 'react';\nimport { Home, Https, EnhancedEncryption } from '@material-ui/icons';\nimport { ChooseCipherType, EncryptionPage } from '../views';\n\nexport const routes = [\n  {\n    title: 'Home',\n    path: '/home',\n    component: <ChooseCipherType />,\n    icon: <Home />,\n  },\n  {\n    title: 'Caesar encryption',\n    path: '/caesar',\n    component: <EncryptionPage type={'caesar'} />,\n    icon: <Https />,\n  },\n  {\n    title: 'Vigenère encryption',\n    path: '/vigenere',\n    component: <EncryptionPage type={'vigenere'} />,\n    icon: <EnhancedEncryption />,\n  },\n];\n\nexport default routes;\n","import React from 'react';\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core';\nimport Header from '../components/Header';\nimport theme from './theme';\nimport routes from './routes';\nimport style from './app.module.css';\n\nconst App = () => (\n  <ThemeProvider theme={theme}>\n    <HashRouter>\n      <div className={style.app}>\n        <Switch>\n          {routes.map((el, idx) => (\n            <Route key={idx} path={el.path} exact>\n              <>\n                <Header title={el.title} routes={routes} path={el.path} />\n                <main>{el.component}</main>\n              </>\n            </Route>\n          ))}\n          <Redirect from={'*'} to={'/home'} />\n        </Switch>\n      </div>\n    </HashRouter>\n  </ThemeProvider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/app';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quarter\":\"EncryptionPage_quarter__1YDC9\",\"half\":\"EncryptionPage_half__Tde93\",\"wrp\":\"EncryptionPage_wrp__3uR6e\",\"wrpVertical\":\"EncryptionPage_wrpVertical__3xjMM EncryptionPage_wrp__3uR6e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ChooseCipherType_btn__3AAJN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__llV42\"};"],"sourceRoot":""}